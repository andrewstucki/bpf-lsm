// Code generated by scripts/generate-structures - DO NOT EDIT.
// to modify, regenerate after modifying templates/probe.bpf.h.j2

#ifndef __PROBE_BPF_H
#define __PROBE_BPF_H

#ifndef EPERM
#define EPERM 1
#endif

#ifdef BPF
#define RINGBUFFER_FLAGS 0
#define LSM_HOOK(module, args...)                                              \
  __attribute__((always_inline)) static int ____##module(                      \
      unsigned long long *ctx, ##args, struct bpf_##module##_event_t *event);  \
  SEC("lsm/" #module)                                                          \
  int BPF_PROG(module##_hook, ##args) {                                        \
    if (module##_enabled == 0) {                                               \
      return 0;                                                                \
    }                                                                          \
    struct bpf_event_t *event = bpf_ringbuf_reserve(                \
        &events, sizeof(struct bpf_event_t),               \
        RINGBUFFER_FLAGS);    \
        if (event) \
        event->type = type_##module##_event_t;                                                \
    int __ret = 0;                                                                 \
    _Pragma("GCC diagnostic push")                                             \
        _Pragma("GCC diagnostic ignored \"-Wint-conversion\"") \
        if (event) { \
          event->module##_event_t.__timestamp = bpf_ktime_get_boot_ns(); \
          __ret =  ____##module(___bpf_ctx_cast(args), &event->module##_event_t);                        \
        } \
    _Pragma("GCC diagnostic pop") \
    if (event) \
      bpf_ringbuf_submit(event, RINGBUFFER_FLAGS);                               \
    return __ret;                                \
  }                                                                            \
  static int ____##module(unsigned long long *ctx, ##args,                     \
                          struct bpf_##module##_event_t *event)

#define initialize_event()                                                     \
  if (!event)                                                                  \
    return 0;
#define reject(event)                                                          \
  return -EPERM;
#define accept(event)                                                          \
  return 0;

struct {
  __uint(type, BPF_MAP_TYPE_RINGBUF);
  __uint(max_entries, 256 * 1024);
} events SEC(".maps");

{% for module in modules %}

const volatile unsigned char {{module.name}}_enabled = 0;
{%- endfor -%}

char _license[] SEC("license") = "GPL";
#endif

{% for module in modules %}
// begin {{module.name}}

{% for structure in module.structures -%}
{% if not structure.enrichment -%}
struct bpf_{{structure.name}} {
  {% for field in structure.fields -%}
  {% if not field.enrichment %}{% if field.complex %}struct bpf_{% endif %}{{field.type.name}} {{field.name}}{% if field.type.size is not none %}[{{field.type.size}}]{% endif %};
  {% endif -%}
  {%- endfor -%}
};

{% endif -%}
{% endfor -%}

// end {{module.name}}
{% endfor -%}

enum event_type {
  {% for module in modules %}
  {% set entry_point = module.structures | last %}
  type_{{ entry_point.name }},
  {% endfor %}
}; 

struct bpf_event_t {
  enum event_type type;
  union {
    {% for module in modules %}
    {% set entry_point = module.structures | last %}
    struct bpf_{{entry_point.name}} {{entry_point.name}};
    {% endfor %}
  };
};

#endif /* __PROBE_BPF_H */
