#!/usr/bin/env python3

from os import path
from glob import glob
from yaml import load, Loader
from typing import Any, NamedTuple
import re
import subprocess

from jinja2 import Template

CURRENT_DIRECTORY = path.dirname(path.realpath(__file__))
SCHEMAS_DIRECTORY = path.abspath(path.join(CURRENT_DIRECTORY, "..", "schemas"))
OUTPUT_DIRECTORY = path.abspath(path.join(CURRENT_DIRECTORY, "..", "src"))
BPF_MODULES = ["bprm_check_security", "path_rename", "path_unlink"]
TRACEPOINTS = [
    ("syscalls", "sys_enter_execve"),
    ("syscalls", "sys_exit_fork"),
    ("syscalls", "sys_exit_vfork"),
    ("syscalls", "sys_exit_clone"),
    ("syscalls", "sys_exit_clone3"),
    ("sched", "sched_process_free"),
]
TEMPLATES = [
    ("libprobe", ["include", "probe.generated.h.j2"]),
    ("probe-sys", ["ffi_generated.rs.j2"]),
    ("probe-sys", ["probe_generated.rs.j2"]),
    ("probe-sys", ["serial_generated.rs.j2"]),
    ("probe-sys", ["transform_generated.rs.j2"]),
    ("probe-sys", ["compiler_generated.rs.j2"]),
    ("probe-sys", ["struct.proto.j2"]),
]


def get_template_path(project, filepath):
    return path.join(CURRENT_DIRECTORY, "..", project, "templates", *filepath)


def get_output_path(project, filepath):
    output_name = path.join(CURRENT_DIRECTORY, "..", project, "src", *filepath)
    return path.splitext(output_name)[0]


def render(all_hooks, event_hooks, modules, tracepoints):
    for (project, filepath) in TEMPLATES:
        template_path = get_template_path(project, filepath)
        output_path = get_output_path(project, filepath)
        with open(template_path) as template_file:
            template = Template(template_file.read(), trim_blocks=True)
            with open(output_path, "w") as output:
                output.write(
                    template.render(all_hooks=all_hooks,
                                    event_hooks=event_hooks,
                                    modules=modules,
                                    tracepoints=tracepoints))
        if project == "libprobe":
            subprocess.run(["clang-format", "-i", output_path], check=True)


# add to this as need be
NAME_NORMALIZATION = re.compile(r"[@\.]")
UNDERSCORE_NORMALIZATION = re.compile(r"__")


def normalize_name(name):
    return NAME_NORMALIZATION.sub("__", name)


def rustify(name):
    keywords = ["type"]
    if name in keywords:
        return "field_%s" % name
    if name == "__timestamp":
        return "timestamp"
    return UNDERSCORE_NORMALIZATION.sub("_", name)


def rustify_class(name):
    return ''.join(word.title() for word in name.split('_'))


class Tracepoint(NamedTuple):
    family: str
    hook: str


class Transformation(NamedTuple):
    method: str


class Type:
    def __init__(self,
                 final,
                 proto,
                 rust,
                 name,
                 size=None,
                 transformation=None,
                 lifetime=False,
                 setter=None):
        self.transformation = transformation
        self.final = final
        self.proto = proto
        self.rust = rust
        self.name = name
        self.size = size
        self.lifetime = lifetime
        self.setter = setter

    def __render_c_name(self):
        if isinstance(self.name, dict):
            return self.name.get('type')
        else:
            return self.name

    def __render_c_suffix(self):
        if isinstance(self.name, dict):
            return self.name.get('suffix')
        elif self.size:
            return "[%d]" % self.size
        else:
            return ""

    def render_c(self, prefix, name, complex):
        if complex:
            return "struct %s%s %s%s;" % (prefix, self.__render_c_name(), name,
                                          self.__render_c_suffix())
        else:
            return "%s %s%s;" % (self.__render_c_name(), name,
                                 self.__render_c_suffix())

    def __render_rust_setter_name(self, dest):
        if self.setter:
            return self.setter
        return "set_%s" % dest

    def __render_rust_setter_transformation(self, dest, source):
        extra = ""
        if isinstance(self.transformation, dict):
            method = self.transformation.get("method")
            extra = self.transformation.get("extra", "")
        else:
            method = self.transformation.method
        if extra != "":
            extra += ", "
        return "event.%s(%s(%se.%s.into()));" % (
            self.__render_rust_setter_name(dest), method, extra, source)

    def render_rust_setter(self, dest, source):
        if not self.transformation:
            return "event.set_%s(e.%s);" % (dest, source)
        return self.__render_rust_setter_transformation(dest, source)


BPF_TYPES = {
    'date':
    Type('u64', 'uint64', 'u64', 'unsigned long'),
    'long':
    Type('u64', 'uint64', 'u64', 'unsigned long'),
    'keyword':
    Type('String', 'string', 'c_char', 'char', 256,
         Transformation('transform_string')),
    'wildcard':
    Type('String', 'string', 'c_char', 'char', 256,
         Transformation('transform_string')),
}


class Field:
    def __init__(self, type, enrichment, final, name, original, complex,
                 queryable, path):
        self.type = type
        self.enrichment = enrichment
        self.final = final
        self.name = name
        self.original = original
        self.complex = complex
        self.queryable = queryable
        self.path = path

    def render_rust_setter(self):
        if self.complex:
            if self.enrichment:
                return "event.%s = Some(Default::default()).into();" % self.final
            else:
                return "event.%s = Some(e.%s.into()).into();" % (self.final,
                                                                 self.name)
        if not self.enrichment:
            return self.type.render_rust_setter(self.final, self.name)

    def render_c_field(self):
        if not self.enrichment:
            return self.type.render_c("bpf_", self.name, self.complex)

    def __render_c_query_field_op(self):
        if not self.complex:
            return "char %s___operator;" % self.name

    def __render_c_query_field(self):
        return self.type.render_c("query_bpf_", self.name, self.complex)

    def render_c_query_field(self):
        if self.queryable:
            decls = [
                self.__render_c_query_field_op(),
                self.__render_c_query_field()
            ]
            compacted = [d for d in decls if d]
            return "\n  ".join(compacted)


class Structure:
    rust_from_ffi_template = '''
impl From<ffi::%s> for %s {
    fn from(e: ffi::%s) -> Self {
        let mut event = Self::default();
        %s
        event
    }
}
'''

    def __init__(self, final, name, enrichment, lifetime, fields, queryable):
        self.final = final
        self.name = name
        self.enrichment = enrichment
        self.lifetime = lifetime
        self.fields = fields
        self.queryable = queryable

    def render_rust_from_ffi(self):
        if not self.enrichment:
            decls = [f.render_rust_setter() for f in self.fields]
            compacted = [d for d in decls if d]
            return self.rust_from_ffi_template.strip() % (
                self.name, self.final, self.name, "\n        ".join(compacted))

    def __render_c_fields(self):
        decls = [f.render_c_field() for f in self.fields]
        compacted = [d for d in decls if d]
        return "\n  ".join(compacted)

    def __render_c_query_fields(self, entrypoint):
        decls = [f.render_c_query_field() for f in self.fields]
        compacted = [d for d in decls if d]
        if entrypoint:
            compacted.insert(0, "char ___absolute;")
        return "\n  ".join(compacted)

    def render_c_field_struct(self):
        if not self.enrichment:
            return "struct bpf_%s {\n  %s\n};" % (self.name,
                                                  self.__render_c_fields())

    def render_c_query_struct(self, entrypoint):
        if self.queryable:
            return "struct query_bpf_%s {\n  %s\n};" % (
                self.name, self.__render_c_query_fields(entrypoint))


class Module:
    def __init__(self, filename):
        with open(filename) as file:
            self.name = path.splitext(path.basename(filename))[0]
            self.final = rustify_class(self.name)
            self.data = load(file, Loader=Loader)
        self.structures = self.__build_structs(BPF_TYPES, False)

    def __structure_name(self, namespaces):
        return "_".join([self.name, "event"] + namespaces + ["t"])

    def __rusty_name(self, namespaces):
        name = "_".join([self.name, "event"] + namespaces)
        return rustify_class(name)

    def __render_module_index(self, index):
        return "#define %s_index %d" % (self.name, index)

    def __render_c_field_structs(self):
        decls = [s.render_c_field_struct() for s in self.structures]
        compacted = [d for d in decls if d]
        return "\n".join(compacted)

    def __render_c_query_structs(self):
        decls = [
            s.render_c_query_struct(s == self.structures[-1])
            for s in self.structures
        ]
        compacted = [d for d in decls if d]
        return "\n".join(compacted)

    def __build_structs(self,
                        types,
                        lifetime,
                        enrichment=False,
                        namespaces=[],
                        child=None):
        data = child if child else self.data
        structures = []
        fields = []
        parent_queryable = False
        for field in data:
            field_enrichment = field.get('enrichment', enrichment)
            name = field.get('name')
            field_type = field.get('type')
            normalized_name = normalize_name(name)
            rust_name = rustify(normalized_name)
            complex = False
            queryable = False
            if field_type == 'group':
                complex = True
                child_namespaces = namespaces + [normalized_name]
                child_lifetime = field.get('lifetime', False)
                if child_lifetime:
                    lifetime = True
                child_structures = self.__build_structs(
                    types, child_lifetime, field_enrichment, child_namespaces,
                    field.get('fields'))
                for c in child_structures:
                    if c.queryable:
                        queryable = True
                        parent_queryable = True
                        break
                field_type = Type(self.__rusty_name(child_namespaces),
                                  self.__rusty_name(child_namespaces),
                                  self.__structure_name(child_namespaces),
                                  self.__structure_name(child_namespaces),
                                  None, None, child_lifetime, None)
                structures += child_structures
            else:
                queryable = field.get('queryable', False)
                if queryable:
                    parent_queryable = True
                if 'override' in field:
                    field_type = Type(field['override']['final'],
                                      field['override']['proto'],
                                      field['override']['rust'],
                                      field['override']['c'], None,
                                      field['override'].get('transform',
                                                            None), False,
                                      field['override'].get('setter', None))
                else:
                    field_type = types[field_type]
            field_path = ".".join(namespaces)
            if len(namespaces) > 0:
                field_path += "."
            fields.append(
                Field(field_type, field_enrichment, rust_name, normalized_name,
                      name, complex, queryable, field_path))
        structure = Structure(self.__rusty_name(namespaces),
                              self.__structure_name(namespaces), enrichment,
                              lifetime, fields, parent_queryable)
        structures.append(structure)
        return structures

    def render_rust_from_ffi(self):
        decls = [s.render_rust_from_ffi() for s in self.structures]
        compacted = [d for d in decls if d]
        return "\n\n".join(compacted)

    def render_c(self, index):
        return "\n\n".join([
            self.__render_module_index(index),
            self.__render_c_field_structs(),
            self.__render_c_query_structs(),
        ])


if __name__ == "__main__":
    schema_files = [
        path.join(SCHEMAS_DIRECTORY, "%s.yml" % f) for f in BPF_MODULES
    ]
    modules = [Module(f) for f in schema_files]
    tracepoints = [Tracepoint(family, hook) for (family, hook) in TRACEPOINTS]
    all_hooks = ", ".join([m.name
                           for m in modules] + [t.hook for t in tracepoints])
    event_hooks = ", ".join([m.name for m in modules])
    render(all_hooks, event_hooks, modules, tracepoints)
