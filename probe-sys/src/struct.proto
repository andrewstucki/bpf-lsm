syntax = "proto2";

package probe.protobuf;

option (rustproto.carllerche_bytes_for_bytes_all) = true;
option (rustproto.carllerche_bytes_for_string_all) = true;
option optimize_for = SPEED;

message BprmCheckSecurityEventEvent {
  
  optional string id = 1 [json_name="id"];
  
  optional string kind = 2 [json_name="kind"];
  
  optional string category = 3 [json_name="category"];
  
  optional string action = 4 [json_name="action"];
  
  optional string field_type = 5 [json_name="type"];
  
  optional string module = 6 [json_name="module"];
  
  optional string provider = 7 [json_name="provider"];
  
  optional uint64 sequence = 8 [json_name="sequence"];
  
  optional uint64 ingested = 9 [json_name="ingested"];
  
}
message BprmCheckSecurityEventProcessParent {
  
  optional uint32 pid = 1 [json_name="pid"];
  
  optional string entity_id = 2 [json_name="entity_id"];
  
  optional string name = 3 [json_name="name"];
  
  optional uint32 ppid = 4 [json_name="ppid"];
  
  optional uint64 start = 5 [json_name="start"];
  
  optional uint64 thread_id = 6 [json_name="thread.id"];
  
}
message BprmCheckSecurityEventProcessTarget {
  
  optional string executable = 1 [json_name="executable"];
  
  optional uint64 args_count = 2 [json_name="args_count"];
  
}
message BprmCheckSecurityEventProcess {
  
  optional uint32 pid = 1 [json_name="pid"];
  
  optional string entity_id = 2 [json_name="entity_id"];
  
  optional string name = 3 [json_name="name"];
  
  optional uint32 ppid = 4 [json_name="ppid"];
  
  optional uint64 start = 5 [json_name="start"];
  
  optional uint64 thread_id = 6 [json_name="thread.id"];
  
  optional BprmCheckSecurityEventProcessParent parent = 7 [json_name="parent"];
  
  optional BprmCheckSecurityEventProcessTarget target = 8 [json_name="target"];
  
}
message BprmCheckSecurityEventUserGroup {
  
  optional string id = 1 [json_name="id"];
  
  optional string name = 2 [json_name="name"];
  
}
message BprmCheckSecurityEventUserEffectiveGroup {
  
  optional string id = 1 [json_name="id"];
  
  optional string name = 2 [json_name="name"];
  
}
message BprmCheckSecurityEventUserEffective {
  
  optional string id = 1 [json_name="id"];
  
  optional string name = 2 [json_name="name"];
  
  optional BprmCheckSecurityEventUserEffectiveGroup group = 3 [json_name="group"];
  
}
message BprmCheckSecurityEventUser {
  
  optional string id = 1 [json_name="id"];
  
  optional string name = 2 [json_name="name"];
  
  optional BprmCheckSecurityEventUserGroup group = 3 [json_name="group"];
  
  optional BprmCheckSecurityEventUserEffective effective = 4 [json_name="effective"];
  
}
message BprmCheckSecurityEvent {
  
  optional uint64 timestamp = 1 [json_name="@timestamp"];
  
  optional BprmCheckSecurityEventEvent event = 2 [json_name="event"];
  
  optional BprmCheckSecurityEventProcess process = 3 [json_name="process"];
  
  optional BprmCheckSecurityEventUser user = 4 [json_name="user"];
  
}



message Event {
  enum EventType {
    
    BPRMCHECKSECURITYEVENT = 0;
    
  }
  required EventType event_type = 1;
  
  optional BprmCheckSecurityEvent bprm_check_security_event_t = 2;
  
}