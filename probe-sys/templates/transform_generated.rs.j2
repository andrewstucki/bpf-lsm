#![allow(clippy::all)]

use protobuf::Message;

use crate::errors::SerializableResult;
use crate::struct_pb::*;
use crate::traits::SerializableEvent;

pub trait TransformationHandler {
{% for module in modules %}{% set entry_point = module.structures | last %}
    fn enrich_{{module.name}}<'a>(&self, e: &'a mut {{entry_point.final}}) -> SerializableResult<&'a mut {{entry_point.final}}>;
{% endfor %}
}

pub struct Transformer<T> {
    handler: T,
}

impl<T: TransformationHandler> Transformer<T> {
    pub fn new(handler: T) -> Self {
        Self { handler: handler }
    }

    pub fn transform(&self, data: Vec<u8>) -> SerializableResult<(String, String)> {
        let e = Event::parse_from_bytes(&data).unwrap();
        match e.get_event_type() {
{% for module in modules %}{% set entry_point = module.structures | last %}
            event::EventType::{{entry_point.final | upper}} => {
                let json = self.handler.enrich_{{module.name}}((&mut e.{{entry_point.name}}.unwrap()).enrich_common()?)?.to_json()?;
                Ok((String::from("{{module.name}}"), json))
            },
{% endfor %}
        }
    }
}
