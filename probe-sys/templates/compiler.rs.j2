use rule_compiler::{Atom, Operation, Operator, QueryWriter, QueryWriterFactory};
use std::convert::TryFrom;
use std::ffi::CString;
use std::fmt;
use std::os::raw::c_char;
use std::fmt::Debug;
use crate::traits::QueryStruct;
use crate::query_writer::InnerBpfQueryWriter;
use crate::constants::{UNSET_ABSOLUTE, UNSET_OPERATOR};
use crate::helpers::operator_to_constant;

{% for module in modules %}
{% set entry_point = module.structures | last %}
{% for structure in module.structures -%}

{% if structure.queryable -%}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct query_bpf_{{structure.name}} {
  {% if entry_point.name == structure.name %}
    pub ___absolute: u8,
  {% endif %}
  {% for field in structure.fields -%}
    {% if field.queryable %}
      {% if not field.complex %}pub {{field.name}}___operator: u8,{% endif %}
      pub {{field.name}}: {% if field.type.size is not none %}[{{field.type.rust}}; {{field.type.size}}]{% else %}{% if field.complex%}query_bpf_{%endif%}{{field.type.rust}}{% endif %}{% if field.type.lifetime %}<'a>{%endif%},
    {% endif -%}
  {% endfor %}
}

impl Default for query_bpf_{{structure.name}} {
    fn default() -> Self {
        Self {
          {% if entry_point.name == structure.name %}___absolute: UNSET_ABSOLUTE,{% endif %}
          {% for field in structure.fields -%}
            {% if field.queryable %}
            {% if not field.complex %}
              {{field.name}}___operator: UNSET_OPERATOR,
              {{field.name}}: {% if field.type.size is not none %}[0; {{field.type.size}}]{% else %}Default::default(){%endif%},
            {% else %}
              {{field.name}}: Default::default(),
            {% endif -%}
            {% endif -%}
          {% endfor %}
        }
    }
}
{% endif -%}
{% endfor %}

{% if entry_point.queryable -%}
impl QueryStruct for query_bpf_{{entry_point.name}} {
    fn set_absolute(&mut self, value: u8) {
        self.___absolute = value;
    }

    fn set_number(&mut self, path: String, operator: Operator, value: u64) -> Result<(), String> {
      match path.as_str() {
        {% for structure in module.structures -%}
        {% for field in structure.fields -%}
          {% if field.queryable == "number" %}
          "{{field.path}}{{field.name}}" => {
              if self.{{field.path}}{{field.name}}___operator != UNSET_OPERATOR {
                  // we can only hold a single condition per variable for now
                  return Err(format!("{} already in condition", path));
              }
              let v = {{field.type.rust}}::try_from(value)
                  .map_err(|_| String::from("{{field.path}}{{field.name}} must be a {{field.type.rust}}"))?;
              self.{{field.path}}{{field.name}} = v;
              self.{{field.path}}{{field.name}}___operator = operator_to_constant(operator);
              Ok(())
          },
          {% endif %}
          {% endfor %}
          {% endfor %}
          _ => Err(format!("numeric field named {} not found in schema", path)),
      }
    }

    fn set_string(
        &mut self,
        path: String,
        operator: Operator,
        value: String,
    ) -> Result<(), String> {
        match path.as_str() {
            {% for structure in module.structures -%}
            {% for field in structure.fields -%}
            {% if field.queryable == "string" %}
            "{{field.path}}{{field.name}}" => {
                if self.{{field.path}}{{field.name}}___operator != UNSET_OPERATOR {
                    // we can only hold a single condition per variable for now
                    return Err(format!("{} already in condition", path));
                }
                if value.len() < {{field.type.size}} {
                  for (dest, src) in self.{{field.path}}{{field.name}}.iter_mut().zip(value.as_bytes().iter()) {
                      *dest = *src as _;
                  }
                  self.{{field.path}}{{field.name}}___operator = operator_to_constant(operator);
                  Ok(())
                } else {
                  Err(format!("{{field.path}}{{field.name}} is too long, maximum {{field.type.size}} characters, given value is {} characters", value.len()))
                }
            },
            {% endif %}
            {% endfor %}
            {% endfor %}
            _ => Err(format!("string field named {} not found in schema", path)),
        }
    }

    fn flush<'a>(&mut self, _probe: &'a super::Probe<'a>) -> Result<(), String> {
       Ok(())
    }
}
{% endif -%}
{% endfor %}

pub struct BpfQueryWriter<'a> {
    table: String,
    {% for module in modules %}
    {% set entry_point = module.structures | last %}
    {% if entry_point.queryable -%}
    write_query_{{entry_point.name}}: InnerBpfQueryWriter<query_bpf_{{entry_point.name}}>,
    {% endif %}
    {%endfor%}
    probe: Option<&'a super::Probe<'a>>,
}

impl<'a> BpfQueryWriter<'a> {
    pub fn new(probe: Option<&'a super::Probe>, table: String, operation: Operation) -> Self {
        Self {
            table: table,
            {% for module in modules %}
            {% set entry_point = module.structures | last %}
            {% if entry_point.queryable -%}
            write_query_{{entry_point.name}}: InnerBpfQueryWriter::<query_bpf_{{entry_point.name}}>::new(
                "{{module.name}}".into(),
                operation,
                8,
            ),
            {% endif %}
            {%endfor%}
            probe: probe,
        }
    }
}

impl<'b> QueryWriter for BpfQueryWriter<'b> {
    fn write_statement<'a>(
        &mut self,
        field: &'a String,
        operator: &'a Operator,
        atom: &'a Atom,
    ) -> Result<(), String> {
        match self.table.as_str() {
            {% for module in modules %}
            {% set entry_point = module.structures | last %}
            {% if entry_point.queryable -%}
            "{{module.name}}" => self.write_query_{{entry_point.name}}.write_statement(field, operator, atom),
            {% endif %}
            {%endfor%}
            _ => Err(format!("invalid table name {}", self.table)),
        }
    }

    fn start_new_clause(&mut self) -> Result<(), String> {
        match self.table.as_str() {
            {% for module in modules %}
            {% set entry_point = module.structures | last %}
            {% if entry_point.queryable -%}
            "{{module.name}}" => self.write_query_{{entry_point.name}}.start_new_clause(),
            {% endif %}
            {%endfor%}
            _ => Err(format!("invalid table name {}", self.table)),
        }
    }

    fn write_absolute(&mut self, value: bool) -> Result<(), String> {
        match self.table.as_str() {
            {% for module in modules %}
            {% set entry_point = module.structures | last %}
            {% if entry_point.queryable -%}
            "{{module.name}}" => self.write_query_{{entry_point.name}}.write_absolute(value),
            {% endif %}
            {%endfor%}
            _ => Err(format!("invalid table name {}", self.table)),
        }
    }

    fn flush(&mut self) -> Result<(), String> {
        match self.probe {
            Some(probe) => match self.table.as_str() {
                {% for module in modules %}
                {% set entry_point = module.structures | last %}
                {% if entry_point.queryable -%}
                "{{module.name}}" => self.write_query_{{entry_point.name}}.flush_probe(probe),
                {% endif %}
                {%endfor%}
                _ => Err(format!("invalid table name {}", self.table)),
            },
            _ => Ok(())
        }
    }
}
